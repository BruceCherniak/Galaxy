void HandleTerminatedRays(RayList *raylist, int *classification)
{
    int terminated_count = 0;

    for (int i = 0; i < raylist->GetRayCount(); i++)
        if (clss == TERMINATED) terminated_count++;

    RenderingP rendering = raylist->GetTheRendering();

    if (terminated_count == 0) return;

    Pixel *local_pixels = (rendering->IsLocal()) ? new Pixel[fbknt] : NULL;

    Renderer::SendPixelsMsg *spmsg = (!rendering->IsLocal()) ? 
        new Renderer::SendPixelsMsg(rendering, renderingSet, raylist->GetFrame(), fbknt) : NULL;

    Pixel *local_pixels = (fbknt && rendering->IsLocal()) ? new Pixel[fbknt] : NULL;

    fbknt = 0;
    int lclknt = 0;

    for (int i = 0; i < raylist->GetRayCount(); i++)
    {
        if (classification[i] == TERMINATED)
        {
            if (rendering->IsLocal())
            {
                Pixel *p = local_pixels + lclknt;

                p->x = raylist->get_x(i);
                p->y = raylist->get_y(i);
                p->r = raylist->get_r(i);
                p->g = raylist->get_g(i);
                p->b = raylist->get_b(i);
                p->o = raylist->get_o(i);

                lclknt++;
            }
            else
            {
                spmsg->StashPixel(raylist, i);
                fbknt++;
            }
        }
   }

    if (spmsg)
    {
      if (raylist->GetFrame() == renderingSet->GetCurrentFrame())
      {
          spmsg->Send(rendering->GetTheOwner());
      }
      else
      {
          delete spmsg;
      }
    }

    if (local_pixels)
    {
        rendering->AddLocalPixels(local_pixels, lclknt, raylist->GetFrame(), GetTheApplication()->GetRank());
        delete[] local_pixels;
    }
}
