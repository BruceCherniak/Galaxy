{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Consolas-Bold;\f2\fnil\fcharset0 Consolas-BoldItalic;
\f3\fnil\fcharset0 Menlo-Regular;\f4\fnil\fcharset0 Consolas;}
{\colortbl;\red255\green255\blue255;\red26\green26\blue26;\red26\green26\blue26;}
\margl1440\margr1440\vieww20420\viewh22020\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\b\fs36 \cf0 Prerequisites\
\

\fs28 ISPC\

\b0\fs24 \
Get Intel ISPC  ispc.github.io/downloads.html  I\'92m currently using 1.9.1   Download the tar.gz for the appropriate platform.   \CocoaLigature0 Then we create an installation directory and unpack it.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f1\b\fs28 \cf0 \
mkdir
\f2\i  ISPC_INSTALL\

\f1\i0 cd
\f2\i  ISPC_INSTALL
\f0\i0\fs24 \CocoaLigature1 \

\f1\fs28 \CocoaLigature0 tar xzf ~/Downloads/ispc-v1.9.1-osx.tar.gz\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\b0\fs24 \cf0 \CocoaLigature1 \
and add 
\f2\i\b\fs28 \CocoaLigature0 ISPC_INSTALL
\f0\i0\fs24 \CocoaLigature1 /ispc-v1.9.1-osx
\b0  to your executable search path - e.g.\
\

\f1\b\fs28 export PATH=$PROJECT/ispc-v1.9.1-osx:$PATH\
\

\f0\b0\fs24 At this point running 
\b ispc
\i  
\i0\b0 at the prompt should produce a warning message (rather than command not found).\
\
You will also need 
\b MPI
\b0  (I used Homebrew to install mpich on my Mac).   This should enable the 
\b mpicxx 
\b0 and 
\b mpicc 
\b0 wrappers.   I\'92m using 
\b clang 
\b0 on my Mac.  You\'92ll also need a relatively recent 
\b cmake
\b0 , 
\b Qt 
\b0 (version 4 - I\'92m using 4.8.7) and 
\b VTK 
\b0 (version 6 or 7;  I\'92m using 7.0)\
\

\b\fs36 Building the code
\b0\fs24 \
\
First we create a project directory:\
\

\f1\b\fs28 mkdir $PROJECT\
cd $PROJECT
\f0\b0\fs24 \
\
Now we get and build the source files:\
\

\f1\b\fs28 mkdir build\
cd build\
\

\f0\fs36 Threadpool\

\b0\fs28 \

\fs24 First we build 
\b threadpool11
\b0 .   Its from github and is released under the GNU license.\
\

\f1\b\fs28 git clone git@github.com:\cb1 \CocoaLigature0 tghosgor/threadpool11.git\cb1 \CocoaLigature1 \
cd \CocoaLigature0 threadpool11\CocoaLigature1 \
git checkout 2.0\
\

\f0\b0\fs24 On my Mac, I needed to add 
\b #include <vector> 
\b0 to threadpool11/threadpool11/src/pool.cpp.    \
\
To build it, \
\

\f1\b\fs28 \cb1 mkdir $PROJECT/build.tp\
cd $PROJECT/build.tp\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 \CocoaLigature0 cmake -DCMAKE_INSTALL_PREFIX=$PROJECT/threadpool11 -DCMAKE_CXX_FLAGS=-std=c++11 ../threadpool11\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \CocoaLigature1 make install\
\

\f0\fs36 \cb1 PVOL-OSPRay\

\b0\fs24 \
Check out the pvol-ospray source - this is the hacked version of OSPRay that includes an interface enabling rays to be passed in to sample the data.   \
\

\f1\b\fs28 cd $PROJECT/build\
git clone git@github.com:TACC/pvol-ospray.git\
cd pvol-ospray\
git checkout ECX2-1\
\

\f0\b0\fs24 and build it\

\f1\b\fs28 \
mkdir ../build.pvo\
cd ../build.pvo\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 \CocoaLigature0 CC=mpicc CXX=mpicxx cmake ../pvol-ospray \\\
    \cb1 -DCMAKE_INSTALL_PREFIX=$PROJECT/ospray \\\cb1 \
    -DCMAKE_VERBOSE_MAKEFILE=ON \\\
    -DOSPRAY_APPS_MODELVIEWER=OFF \\\
    -DOSPRAY_APPS_PARTICLEVIEWER=OFF \\\
    -DOSPRAY_APPS_QTVIEWER=OFF \\\
    -DOSPRAY_APPS_VOLUMEVIEWER=OFF \\\
    -DOSPRAY_BUILD_ISA=ALL \\\
    -DOSPRAY_BUILD_MIC_SUPPORT=OFF \\\
    -DOSPRAY_BUILD_MPI_DEVICE=OFF \\\
    -DOSPRAY_MODULE_LOADERS=OFF \\\
    -DOSPRAY_MODULE_OPENGL_UTIL=OFF \\\
    -DOSPRAY_MODULE_SEISMIC=OFF \\\
    -DOSPRAY_MODULE_TACHYON=OFF\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \CocoaLigature1 \
make -j 5 install\
\

\f0\fs36 PVOL\

\f1\fs28 \

\f0\b0\fs24 Now check out the pvol source:\
\

\f1\b\fs28 cd  $PROJECT/build\
\
git clone git@github.com:TACC/pvol.git\
cd pvol\
git checkout ECX2-1\
\

\f0\b0\fs24 and build it.   This assumes a VTK build available at VTK_DIR and that VTK_VERSION  is the version.
\f1\b\fs28 \
mkdir ../build.pv\
cd ../build.pv\

\f0\b0\fs24 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f1\b\fs28 \cf0 \cb1 \CocoaLigature0 CC=mpicc CXX=mpicxx cmake ../pvol \\\
  -DCMAKE_BUILD_TYPE=Release \\\
  -DVTK_DIR=$VTK_DIR/lib/cmake/vtk-$VTK_VERSION \\\
  -DCMAKE_INSTALL_PREFIX=$PROJECT \\\
  -DCMAKE_CXX_FLAGS=-std=c++11 \\\
  -DCMAKE_VERBOSE_MAKEFILE=ON \\\
  -DWITH_QT_VIEWER=ON \\\
  -DWITH_CINEMA=OFF \\\
  -DOSPRAY_DIR=$PROJECT/ospray  \\\
  -DTHREADPOOL11_DIR=$PROJECT/threadpool11\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f3\b0 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f1\b \cf0 \
\cb1 cmake .\
make -j 5 install
\f4\b0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs24 \cf0 Now set up the environment to use what we just built and installed.   I\'92m assuming your environment is already set up to link in the VTK libraries.\
\
I source an env file to do so - here\'92s an example that you\'92d install in $PROJECT:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f4\fs28 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f1\b \cf0 export PROJECT="$( cd "$( dirname "$\{BASH_SOURCE[0]\}" )" && pwd )"\
\
export PATH=$PROJECT/bin:$PATH\
\
if test `uname` == 'Darwin' ; then\
\
	echo "DARWIN"\
	export PATH=$PROJECT/bin/Viewer.app/Contents/MacOS:$PATH\
	export DYLD_LIBRARY_PATH=$PROJECT/lib:$PROJECT/ospray/lib64:$PROJECT/ospray/lib:$DYLD_LIBRARY_PATH\
\
else\
\
	export LD_LIBRARY_PATH=$PROJECT/lib:$PROJECT/ospray/lib64:$PROJECT/ospray/lib:$LD_LIBRARY_PATH\
\
fi
\f4\b0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\b\fs48 \cf0 \CocoaLigature1 Using the Viewer
\b0\fs24 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f4\fs28 \cf0 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs24 \cf0 So - lets give it a whirl.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f4\fs28 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f1\b \cf0 mkdir $PROJECT/test\
cd $PROJECT/test\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f4\b0 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs24 \cf0 Make some volumetric test data\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f1\b\fs28 \cf0 radial -r 256 256 256\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\b0\fs24 \cf0 will create a .VTI dataset with several variables: ramps in X, Y and Z; oneBall is f(x, y, z) = mag(x, y, z) and eightBalls is f(x, y, z) = mag(abs(x) - 0.5, abs(y) - 0.5, abs(z) - 0.5)    We can create native format datasets:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f1\b\fs28 \cf0 vti2raw radial-0.vti oneBall\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\b0\fs24 \cf0 \
will create oneBall-0.vol and \'85raw.\
\
Now we can use the Viewer.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f1\b\fs28 \cf0 Viewer &\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\b0\fs24 \cf0 \
In the dialog, select oneBall.vol and Open.   This will load the dataset into memory.   Note that this auto partitions the data - had I run \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f4\fs28 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\b \cf0 mpirun -np 4 Viewer &\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\b0\fs24 \cf0 \
It would divide the data into 4 parts and assign one to each process.   Anyway, its in memory now; we can create a viewer:   in the menu bar, 
\b Viewers->New 
\b0 will pop up an empty viewer.  Now we attach the dataset to the viewer by hitting control-P on the viewer window to open its properties window.   Hitting Add will present you with a menu of the loaded datasets; doubleclick oneBall.\
\
Still, nothing in the viewer, since we have yet to tell it how to visualize the data.   It should put up an outline, but it doesn\'92t.   Anyway, you\'92ll see oneBall in the viewer\'92s property window.   Select it and hit Edit to get the dataset\'92s properties.  In the Isovalues tab, hit Add to add an isovalue, and Commit.  Slide the widget and you should see a sphere of varying radius.  Similarly, Add in the Slices tab to add a slice and Commit.  Use of the Volume Rendering tab is left as an exercise for the user.\
\
Now lets create a second dataset: back in the xterm, \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f4\fs28 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f1\b \cf0 vti2raw radial-0.vti eightBalls\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\b0\fs24 \cf0 \
Then, select the viewer to get its menu bar, and 
\b File->Load Dataset 
\b0  and load eightBalls.vol   You might need to change the file name extension in the dialog.   Now control-p in the viewer, and Add.   That\'92ll pop up a menu of available datasets - oneBall and eightBalls.   Doubleclick eightBalls and it will appear in the viewer\'92s property window; select it and Edit to get its properties, and you can add slices, isovalues, or volume rendering as above.  \
\
Note the little \'91x\'92 button next to slice and isovalue interactors; it\'92ll delete the slice/isosurface.\
\
By default the lighting is in object space; in the viewer\'92s dialog, select the Lights tab to change the lighting.   The little unlabelled checkbox will shift the light to be relative to the camera rather than the object.  You can also turn on shadows here, and change from a fixed ambient component to trace some AO rays.   32 is reasonable.  You can also change the radius of effect of the AO rays; here about 0.1 is reasonable.   Take a look, then turn it AO off again.  In the next section it\'92ll slow things down.\
\
Now lets add some particles to the mix.   In the xterm, run:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f1\b\fs28 \cf0 particles oneBall-0.vol -n 10000 -s PPP -r 0.05 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\b0\fs24 \cf0 \
This will generate 10000 particles in the bounding box of the oneBall-0.vol dataset.   Unfortunately, particles datasets are not currently auto partitioned, so the 
\i PPP 
\i0 parameter specifies the number of partitions.   The -r parameter is a ghost zone width; particles within the ghost zone are duplicated in each partition so fragmentary particles don\'92t appear at boundaries.   The correct value would be the largest radius that particles will be rendered.     The 
\i particles.part 
\i0 output file contains the layout of the partitioned dataset (in XML format), indicating the bounding box and data file for each partition.\
\
As before, add the particles.part data to the viewer.   By default, the radius is large; in the particles dataset properties, one parameter is available - the radius - and is given by a slider with bounds at 0 and 1.   Change the upper bound to 0.1 and move the slider down to get a reasonable result.  A value of 0.02 is reasonable.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b\fs48 \cf0 \CocoaLigature1 Batch Mode
\i \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\fs24 \cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\i0\b0 \cf0 B\CocoaLigature0 atch mode relies on a state file to define the one or more visualizations.   State files define a set of 
\i visualizations
\i0  and a set of cameras.   A visualization consists of a specification of one or more datasets to appear in the visualization, along with the properties of each - the slicing planes, isovalues, transfer functions, radii etc.   The effect of the state file is the cross product of the sets of visualizations and cameras: a rendering of each visualization from every camera will be produced.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 \
The following is a state file that should work with the datasets we created above, and will result in three renderings: a single visualization, containing two datasets, rendered from each of the three cameras.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f4\fs28 \cf0 \{\
    "Datasets":\
    [\
      \{\
        "name": "oneBall",\
        "type": "Volume",\
        "filename": "oneBall-0.vol"\
      \},\
      \{\
        "name": "eightBalls",\
        "type": "Volume",\
        "filename": "eightBalls-0.vol"\
      \}\
    ],\
    "Renderer": \{\
        "Lighting": \{\
          "Sources": [[0, 0, -4]],\
          "shadows": true,\
          "Ka": 0.2,\
          "Kd": 0.8,\
          "ao count": 0,\
          "ao radius": 0.1\
      \}\
    \},\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf2 \cb1     "Visualizations":\
    [\
      \{\
        "annotation": "",\
        "operators":\
          [\
            \{\
              "type": "Volume",\
              "dataset": "eightBalls",\
              "volume rendering": true,\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf3 \cb1               "isovalues": [ 0.05 ],\
              "slices": [ [0, 0, 1, 0] ],\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf2 \cb1               "colormap": [\
                [0.00,1.0,0.5,0.5],\
                [0.25,0.5,1.0,0.5],\
                [0.50,0.5,0.5,1.0],\
                [0.75,1.0,1.0,0.5],\
                [1.00,1.0,0.5,1.0]\
              ],\
              "opacitymap": [\
              [ 0.00, 0.05],\
              [ 0.20, 0.02],\
              [ 0.21, 0.00],\
              [ 1.00, 0.00]\
             ]\
            \},\
            \{\
              "type": "Volume",\
              "dataset": "oneBall",\
              "isovalues": [ 0.25 ],\
              "volume rendering": false,\
              "colormap": [\
                [0.00,1.0,0.5,0.5],\
                [0.25,0.5,1.0,0.5],\
                [0.50,0.5,0.5,1.0],\
                [0.75,1.0,1.0,0.5],\
                [1.00,1.0,0.5,1.0]\
               ],\
              "opacitymap": [\
                [ 0.00, 0.05],\
                [ 0.20, 0.05],\
                [ 0.21, 0.00],\
                [ 1.00, 0.00]\
               ]\
            \}\
          ]\
       \}\
    ],\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 \cb1     "Cameras":\
    [\
      \{\
        "viewpoint": [3, 0, -4],\
        "viewcenter": [0, 0, 0],\
        "viewup": [0, 1, 0],\
        "aov": 30\
      \},\
      \{\
        "viewpoint": [2, 3, -4],\
        "viewcenter": [0, 0, 0],\
        "viewup": [0, 1, 0],\
        "aov": 30\
      \},\
      \{\
        "viewpoint": [4, 3, -2],\
        "viewcenter": [0, 0, 0],\
        "viewup": [0, 1, 0],\
        "aov": 30\
      \}\
    ]\
\}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs24 \cf0 Considering each section in turn:\
\
The Datasets section define the datasets that are available for visualization.   Each dataset specification includes the means to access the data, either using a file name or the information necessary to attach to an external source of data, and a name to be used internally.\
\
The Renderer section includes the properties of the rendering, which are currently common among all the results of the run.   Rendering properties currently are simply the lighting model to be used, including the light sources themselves, whether to cast shadow rays or to add a fixed proportion of diffuse lighting, and whether to cast AO rays or to add a fixed proportion of ambient light.\
\
The Visualizations section is an array, where each element (a 
\i visualization
\i0 ) contains an array of 
\i operators
\i0 : one or more datasets and properties to be included in the visualization.   As an example, if the following is an element in a visualization operator array, that array will include the eightBalls dataset, with one slice, one isovalue and with volume rendering using the given transfer function.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f4\fs28 \cf0 \{\
    "type": "Volume",\
    "dataset": "eightBalls",\
    "volume rendering": true,\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf3     "slices": [ [0, 0, 1, 0] ],\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0     "isovalues": [ 0.05 ],\
    \'94colormap": [\
            [0.00,1.0,0.5,0.5],\
            [0.25,0.5,1.0,0.5],\
            [0.50,0.5,0.5,1.0],\
            [0.75,1.0,1.0,0.5],\
            [1.00,1.0,0.5,1.0]\
           ],\
    "opacitymap": [\
            [ 0.00, 0.05],\
            [ 0.20, 0.02],\
            [ 0.21, 0.00],\
            [ 1.00, 0.00]\
           ]\
\}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs24 \cf0 \
Finally, the Cameras section is also an array, consisting of the cameras to be used.   Cameras are very simply specified.\
\
If you cut\'92n\'92paste the complete state file above into a text file named 
\b batch.json 
\b0 in the test directory, you can run:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f1\b\fs28 \cf0 [mpirun 
\f2\i mpiargs
\f1\i0 ] state [-s width height] 
\f0\fs24 batch.json
\f1\fs28 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\b0\fs24 \cf0 You will produce three output .png files.   \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b\fs48 \cf0 \CocoaLigature1 Cinema 
\b0\fs24 \
\
Cinema databases are built in batch mode, and thus from a batch file that contains arrays of visualizations and cameras.   This file may contain many visualizations; for example, if the the Cinema database has a varying isovalue and a moving slicing plane, there will be a separate visualization for each combination of isosurface value and slicing plane position.   Ten isovalues and ten slicing plane positions lead to 100 unique visualizations.   Similarly, the batch file may contain many cameras, one for each desired viewpoint.   To make the creation of such batch files simple, the 
\b cinema.json 
\b0 file specifies a single visualization and camera parametrically.   The following shows an example:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f4\b0\fs28 \cf0 \cb1 \CocoaLigature0 \{\
    "Datasets":\
    [\
      \{\
        "name": "oneBall",\
        "type": "Volume",\
        "filename": "oneBall-0.vol"\
      \},\
      \{\
        "name": "eightBalls",\
        "type": "Volume",\
        "filename": "eightBalls-0.vol"\
      \}\
    ],\
    "Renderer": \{\
        "Lighting": \{\
          "Sources": [[0, 0, -4]],\
          "shadows": true,\
          "Ka": 0.2,\
          "Kd": 0.8,\
          "ao count": 0,\
          "ao radius": 0.1\
      \}\
    \},\
    "Visualization":\
    [\
      \{\
        "type": "Isosurface",\
        "dataset": "eightBalls",\
        "isovalue range": \{ "min": 0.3, "max": 1.3, "count": 10 \},\
        "colormap": "eightBalls_cmap.json",\
        "opacitymap": "eightBalls_omap.json"\
      \},\
      \{\
        "type": "Slice",\
        "dataset": "oneBall",\
        "plane range":\
        \{\
          "w": \{ "min": -0.9, "max": 0.9, "count": 10 \},\
          "normal": [0.0, 0.0, 1.0]\
        \},\
        "colormap": "oneBall_cmap.json"\
      \},\
      \{\
        "type": "Volume Rendering",\
        "dataset": "eightBalls",\
        "colormap": "eightBalls_cmap.json",\
        "opacitymap": "eightBalls_omap.json"\
       \}\
    ],\
    "Camera":\
    \{\
      "viewpoint": [3, 0, -4],\
      "viewcenter": [0, 0, 0],\
      "viewup": [0, 1, 0],\
      "theta angle": \{ "min": -0.5, "max": 0.5, "count": 2 \},\
      "phi angle": \{ "min": -0.5, "max": 0.5, "count": 2 \},\
      "aov": 30\
    \}\
\}\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 \CocoaLigature1 In this example, we see a single \'93Visualization\'94 element, rather than the array of visualizations given in a state file.   This, though, parametrically defines a set of 100\
visualizations, consisting of the cross product of 10 isovalues and 10 offsets of a slicing plane (which varies from -1 to 1 based on the range of the intersection of the normal ray with the object bounding box.   Similarly, a single parametric camera is given as a base view defined by a viewpoint and view center, but varying the azimuth and elevation in a range (in radians).    This defines 4 cameras, and, with 100 visualizations, will create a Cinema database of 400 images.\
\
Note, also, that the colormaps and opacity maps can be given as file names. \
\
Given such a 
\b cinema.json
\i  
\i0\b0 file, the included Python script 
\b cinema2state 
\b0 will expand the parametric cinema specification to an explicit batch file, and prepare a Cinema database.   If the above is in 
\b cinema.json
\b0 , the corresponding Cinema database can be created by:\
\

\f1\b\fs28 cinema2state cinema.json
\f0\b0\fs24 \
\
which will create 
\b state.json
\b0  and initialize 
\b cinema.cdb.  
\b0 Following this, \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f1\b\fs28 \cf0 \cb1 \CocoaLigature0 [mpirun 
\f2\i mpiargs
\f1\i0 ]\CocoaLigature1  state [-s width height] -C state.json\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\b0\fs24 \cf0 \CocoaLigature0 \
will render the necessary images and deposit them into cinema.cdb.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b\fs48 \cf0 \CocoaLigature1 Performance and a note on threading\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b0\fs24 \cf0 \CocoaLigature0 This renderer is parallel both by using multiple processes over MPI and by threading within each process.  Both the generation of initial rays and the processing of rays is now multithreaded.   By default, only a single thread is used, but the PVOL_NTHREADS environment variable can be used to increase the number of worker threads.   \
\
On my Mac Powerbook (2.8 GHz 4 core), the above Cinema database requires 579 seconds to render at 500x500 resolution.   Using PVOL_NTHREADS=8 (the activity monitor indicates there are 8 virtual cores - hyperthreading?) reduces rendering time to 156 seconds.}