language: cpp
dist: xenial # get a semi-modern linux

branches:
  only:
    - travis-ci
    - dev
    # - master

matrix:
  include:
    - os: osx
      compiler: clang
      env:
        - MATRIX_EVAL=""

    # TODO: currently fails due to --std=c++11 flag inclusion 
    #       since cmake detects mac/clang and gcc barfs rather than ignores
    # - os: osx
    #   compiler: gcc
    #   env:
    #     - MATRIX_EVAL="CC=gcc-7 && CXX=g++-7"

    # - os: linux
    #   compiler: clang
    #   env:
    #     - MATRIX_EVAL=""

    # - os: linux
    #   compiler: gcc
    #   env:
    #     - MATRIX_EVAL="CC=gcc-7 && CXX=g++-7"



git:
  submodules: false # submodule init handled by prep-third-party.sh

cache:
  directories:
    - .galaxy
    - third-party/ispc
    - third-party/embree
    - third-party/ospray
    - third-party/rapidjson
    - third-party/VTK-8.1.2

addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - g++-7
      - libtbb-dev
      - libboost-all-dev
      - mpi-default-dev
      - freeglut3-dev
      - libxrandr-dev
      - libxinerama-dev
      - libxcursor-dev
      - perceptualdiff
      - python-numpy
  homebrew:
    packages: 
      - vtk
      - tbb
      - boost
      - open-mpi
      - freeglut
      - perceptualdiff
      # - gcc@7

before_install:
  - eval "${MATRIX_EVAL}"

script:
  # use this line only to rebuild VTK cache for linux
  # - rm -rf third-party/VTK-8.1.2 ; GXY_REBUILDING_CACHE=1

  # the travis-ci build script does the following:
  # 0a. if VTK not built: build, cache and exit (linux only, osx has a brew install)
  # 0b. if no VTK python wrappers: build, cache and exit (linux only)
  # 0c. if no third-party builds (ospray, embree, rapidjson): build and cache 
  # 1. build Galaxy interactive interface
  # 2. build Galaxy image writing interface
  # 3. run gold image tests
  - scripts/travis-ci-build.sh
  - if [ -z ${GXY_REBUILDING_CACHE} ]; then tests/image-gold-tests.sh; fi


