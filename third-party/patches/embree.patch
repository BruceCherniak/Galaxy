diff --git a/CMakeLists.txt b/CMakeLists.txt
index a5076e7cf..30ca25972 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -14,6 +14,9 @@
 ## limitations under the License.                                           ##
 ## ======================================================================== ##
 
+## NOTE: This file has been modified by a Galaxy patch.
+##       See the GALAXY BEGIN / GALAXY END block(s) below.
+
 SET(EMBREE_VERSION_MAJOR 3)
 SET(EMBREE_VERSION_MINOR 5)
 SET(EMBREE_VERSION_PATCH 2)
@@ -97,7 +100,12 @@ MARK_AS_ADVANCED(CMAKE_OSX_SYSROOT)
 MARK_AS_ADVANCED(CLEAR CMAKE_CXX_COMPILER)
 
 SET(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/common/cmake ${CMAKE_MODULE_PATH})
-
+# GALAXY BEGIN ADDED CODE - by Galaxy patch
+IF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
+  SET(CMAKE_INSTALL_PREFIX ${PROJECT_SOURCE_DIR}/install CACHE PATH "Install path prefix, prepended onto install directories." FORCE)
+ENDIF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
+# GALAXY END ADDED CODE - by Galaxy patch
+
 INCLUDE(test)
 
 ##############################################################
@@ -106,7 +114,10 @@ INCLUDE(test)
 
 GET_PROPERTY(SHARED_LIBS_SUPPORTED GLOBAL PROPERTY TARGET_SUPPORTS_SHARED_LIBS)
 IF(SHARED_LIBS_SUPPORTED)
-  OPTION(EMBREE_STATIC_LIB "Build Embree as a static library.")
+  # GALAXY BEGIN MODIFIED CODE - by Galaxy patch
+  # original code: OPTION(EMBREE_STATIC_LIB "Build Embree as a static library.")
+  OPTION(EMBREE_STATIC_LIB "Build Embree as a static library." ON)
+  # GALAXY END MODIFIED CODE - by Galaxy patch
   MARK_AS_ADVANCED(CLEAR EMBREE_STATIC_LIB)
 ELSE()
   SET(EMBREE_STATIC_LIB ON CACHE BOOL "Build Embree as a static library." FORCE)
@@ -119,8 +130,11 @@ ELSE()
 ENDIF()
 
 OPTION(EMBREE_ISPC_SUPPORT "Build Embree with support for ISPC applications." ON)
-OPTION(EMBREE_TUTORIALS    "Enable to build Embree tutorials" ON)
-SET(EMBREE_API_NAMESPACE "" CACHE STRING "C++ namespace to put API symbols into.")
+# GALAXY BEGIN MODIFIED CODE - by Galaxy patch
+# original code: OPTION(EMBREE_TUTORIALS    "Enable to build Embree tutorials" ON)
+OPTION(EMBREE_TUTORIALS    "Enable to build Embree tutorials" OFF)
+# GALAXY END MODIFIED CODE - by Galaxy patch
+ SET(EMBREE_API_NAMESPACE "" CACHE STRING "C++ namespace to put API symbols into.")
 SET(EMBREE_LIBRARY_NAME  "embree${EMBREE_VERSION_MAJOR}" CACHE STRING "Name of the embree library file (default is embree${EMBREE_VERSION_MAJOR})")
 
 IF (EMBREE_API_NAMESPACE AND EMBREE_ISPC_SUPPORT)
diff --git a/common/cmake/ispc.cmake b/common/cmake/ispc.cmake
index 2c5757f6c..31352e04b 100644
--- a/common/cmake/ispc.cmake
+++ b/common/cmake/ispc.cmake
@@ -14,6 +14,9 @@
 ## limitations under the License.                                           ##
 ## ======================================================================== ##
 
+## NOTE: This file has been modified by a Galaxy patch.
+##       See the GALAXY BEGIN / GALAXY END block(s) below.
+
 # ##################################################################
 # add macro INCLUDE_DIRECTORIES_ISPC() that allows to specify search
 # paths for ISPC sources
@@ -25,29 +28,63 @@ ENDMACRO ()
 
 IF (EMBREE_ISPC_SUPPORT)
 
+# GALAXY BEGIN MODIFIED CODE - by Galaxy patch
+# original code:
+# # ISPC versions to look for, in decending order (newest first)
+# SET(ISPC_VERSION_WORKING "1.9.1" "1.9.0" "1.8.3" "1.8.2")
+# LIST(GET ISPC_VERSION_WORKING -1 ISPC_VERSION_REQUIRED)
+
+# IF (NOT EMBREE_ISPC_EXECUTABLE)
+#   # try sibling folder as hint for path of ISPC
+#   IF (APPLE)
+#     SET(ISPC_DIR_SUFFIX "osx")
+#   ELSEIF(WIN32)
+#     SET(ISPC_DIR_SUFFIX "windows")
+#     IF (MSVC14)
+#       LIST(APPEND ISPC_DIR_SUFFIX "windows-vs2015")
+#     ELSE()
+#       LIST(APPEND ISPC_DIR_SUFFIX "windows-vs2013")
+#     ENDIF()
+#   ELSE()
+#     SET(ISPC_DIR_SUFFIX "linux")
+#   ENDIF()
+#   FOREACH(ver ${ISPC_VERSION_WORKING})
+#     FOREACH(suffix ${ISPC_DIR_SUFFIX})
+#       LIST(APPEND ISPC_DIR_HINT ${PROJECT_SOURCE_DIR}/../ispc-v${ver}-${suffix})
+#     ENDFOREACH()
+#   ENDFOREACH()
+# new code (taken from ospray/components/ospcommon/cmake/ispc.cmake v1.8.5)
 # ISPC versions to look for, in decending order (newest first)
-SET(ISPC_VERSION_WORKING "1.9.1" "1.9.0" "1.8.3" "1.8.2")
-LIST(GET ISPC_VERSION_WORKING -1 ISPC_VERSION_REQUIRED)
+set(ISPC_VERSION_WORKING "1.10.0" "1.9.2" "1.9.1")
+list(GET ISPC_VERSION_WORKING -1 ISPC_VERSION_REQUIRED)
 
-IF (NOT EMBREE_ISPC_EXECUTABLE)
+if (NOT EMBREE_ISPC_EXECUTABLE)
   # try sibling folder as hint for path of ISPC
-  IF (APPLE)
-    SET(ISPC_DIR_SUFFIX "osx")
-  ELSEIF(WIN32)
-    SET(ISPC_DIR_SUFFIX "windows")
-    IF (MSVC14)
-      LIST(APPEND ISPC_DIR_SUFFIX "windows-vs2015")
-    ELSE()
-      LIST(APPEND ISPC_DIR_SUFFIX "windows-vs2013")
-    ENDIF()
-  ELSE()
-    SET(ISPC_DIR_SUFFIX "linux")
-  ENDIF()
-  FOREACH(ver ${ISPC_VERSION_WORKING})
-    FOREACH(suffix ${ISPC_DIR_SUFFIX})
-      LIST(APPEND ISPC_DIR_HINT ${PROJECT_SOURCE_DIR}/../ispc-v${ver}-${suffix})
-    ENDFOREACH()
-  ENDFOREACH()
+  if (APPLE)
+    set(ISPC_DIR_SUFFIX "osx" "Darwin")
+  elseif(WIN32)
+    set(ISPC_DIR_SUFFIX "windows" "win32")
+    if (MSVC_VERSION LESS 1900)
+      message(WARNING "MSVC 12 2013 is not supported anymore.")
+    else()
+      list(APPEND ISPC_DIR_SUFFIX "windows-vs2015")
+    endif()
+  else()
+    set(ISPC_DIR_SUFFIX "linux" "Linux")
+  endif()
+  foreach(v "" "v")
+   foreach(ver ${ISPC_VERSION_WORKING})
+    foreach(suffix ${ISPC_DIR_SUFFIX})
+     foreach(d "" "/bin")
+      list(APPEND ISPC_DIR_HINT ${PROJECT_SOURCE_DIR}/../ispc-${v}${ver}-${suffix}${d})
+      # GALAXY BEGIN ADDED CODE - by Galaxy patch
+      LIST(APPEND ISPC_DIR_HINT ${PROJECT_SOURCE_DIR}/../ispc/ispc-${v}${ver}-${suffix}${d})
+      # GALAXY END ADDED CODE - by Galaxy patch
+     endforeach()
+    endforeach()
+   endforeach()
+  endforeach()
+# GALAXY END MODIFIED CODE - by Galaxy patch
 
   FIND_PROGRAM(EMBREE_ISPC_EXECUTABLE ispc PATHS ${ISPC_DIR_HINT} DOC "Path to the ISPC executable.")
   IF (NOT EMBREE_ISPC_EXECUTABLE)
